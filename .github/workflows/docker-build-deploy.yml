name: Build and Deploy Basetalk Docker Images

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - project: mat4331-basetalk-ai
            path: mat4331-basetalk-ai/
            host: AI_HOST
          - project: mat4331-basetalk-backend
            path: mat4331-basetalk-backend/
            host: MAIN_HOST_1,MAIN_HOST_2
          - project: mat4331-basetalk-crawler
            path: mat4331-basetalk-crawler/
            host: CRAWLER_HOST

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine if project has changed
        id: check_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- ${{ matrix.path }}; then
            echo "changed=false" >> $GITHUB_ENV
          else
            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Skip unchanged project
        if: env.changed == 'false'
        run: echo "No changes in ${{ matrix.project }}. Skipping build and deploy."

      - name: Log in to DockerHub
        if: env.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        if: env.changed == 'true'
        run: |
          docker build \
            --build-arg BASE_URL="${{ secrets.BASE_URL }}" \
            --build-arg CLIENT_DOMAIN="${{ secrets.CLIENT_DOMAIN }}" \
            --build-arg GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --build-arg GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --build-arg JWT_ACCESS_SECRET="${{ secrets.JWT_ACCESS_SECRET }}" \
            --build-arg JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
            --build-arg JWT_GRANT_SECRET="${{ secrets.JWT_GRANT_SECRET }}" \
            --build-arg MONGO_DB_URI="${{ secrets.MONGO_DB_URI }}" \
            --build-arg POSTGRES_DATABASE="${{ secrets.POSTGRES_DATABASE }}" \
            --build-arg POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}" \
            --build-arg POSTGRES_USERNAME="${{ secrets.POSTGRES_USERNAME }}" \
            --build-arg POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            --build-arg RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}" \
            --build-arg RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            --build-arg RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
            --build-arg RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}" \
            --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
            -t kys010306/${{ matrix.project }} ${{ matrix.project }}

      - name: Push Docker Image to DockerHub
        if: env.changed == 'true'
        run: |
          docker push kys010306/${{ matrix.project }}

      - name: Add SSH Key and Register Known Hosts
        if: env.changed == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts

        shell: bash

      - name: Deploy Service to EC2 instances via Bastion
        if: env.changed == 'true'
        run: |
          HOSTS=$(echo "${{ secrets[matrix.host] }}" | tr ',' ' ')
          for HOST in $HOSTS; do
            ssh -i ~/.ssh/id_rsa -o "StrictHostKeyChecking=no" -o "ProxyJump ubuntu@${{ secrets.BASTION_HOST }}" ubuntu@$HOST '
              sudo timedatectl set-timezone Asia/Seoul &&
              sudo docker-compose down --rmi all --volumes --remove-orphans &&
              sudo docker container prune -f &&
              sudo docker network prune -f &&
              sudo docker image prune -af &&
              sudo docker volume prune -f &&
              sudo docker-compose pull && 
              sudo docker-compose up -d
            '
          done
        shell: bash

      - name: Clean up SSH key
        if: env.changed == 'true'
        run: |
          rm -f ~/.ssh/id_rsa
        shell: bash
